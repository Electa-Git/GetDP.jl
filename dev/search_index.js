var documenterSearchIndex = {"docs":
[{"location":"#GetDP-API-reference","page":"API reference","title":"GetDP API reference","text":"","category":"section"},{"location":"#GetDP.AbstractGetDPObject","page":"API reference","title":"GetDP.AbstractGetDPObject","text":"GetDPObject\n\nBase GetDP object that other objects inherit from.\n\n\n\n\n\n","category":"type"},{"location":"#GetDP.CaseItem_","page":"API reference","title":"GetDP.CaseItem_","text":"CaseItem_\n\nA case item in a GetDP object.\n\n\n\n\n\n","category":"type"},{"location":"#GetDP.Case_","page":"API reference","title":"GetDP.Case_","text":"Case_\n\nA case in a GetDP object.\n\n\n\n\n\n","category":"type"},{"location":"#GetDP.Constraint","page":"API reference","title":"GetDP.Constraint","text":"Constraint\n\nDefining constraints.\n\n\n\n\n\n","category":"type"},{"location":"#GetDP.Formulation","page":"API reference","title":"GetDP.Formulation","text":"Formulation\n\nBuilding equations.\n\n\n\n\n\n","category":"type"},{"location":"#GetDP.Function","page":"API reference","title":"GetDP.Function","text":"Function\n\nDefining functions.\n\n\n\n\n\n","category":"type"},{"location":"#GetDP.Group","page":"API reference","title":"GetDP.Group","text":"Group\n\nDefining topological entities.\n\n\n\n\n\n","category":"type"},{"location":"#GetDP.ObjectItem","page":"API reference","title":"GetDP.ObjectItem","text":"ObjectItem\n\nAn object item in a GetDP object.\n\n\n\n\n\n","category":"type"},{"location":"#GetDP.PostOperation","page":"API reference","title":"GetDP.PostOperation","text":"PostOperation\n\nDefining post-operations.\n\n\n\n\n\n","category":"type"},{"location":"#GetDP.PostProcessing","page":"API reference","title":"GetDP.PostProcessing","text":"PostProcessing\n\nDefining post-processing.\n\n\n\n\n\n","category":"type"},{"location":"#GetDP.Problem","page":"API reference","title":"GetDP.Problem","text":"Problem\n\nThe main problem definition class that brings together all the components.\n\n\n\n\n\n","category":"type"},{"location":"#GetDP.Resolution","page":"API reference","title":"GetDP.Resolution","text":"Resolution\n\nDefining how to solve the problem.\n\n\n\n\n\n","category":"type"},{"location":"#GetDP.SimpleItem","page":"API reference","title":"GetDP.SimpleItem","text":"SimpleItem\n\nA simple item in a GetDP object.\n\n\n\n\n\n","category":"type"},{"location":"#GetDP.Abs-Tuple{Any}","page":"API reference","title":"GetDP.Abs","text":"Abs(expression)\n\nGenerate the GetDP string representation for the absolute value/modulus function Abs[...]. (Works for complex numbers).\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.Acos-Tuple{Any}","page":"API reference","title":"GetDP.Acos","text":"Acos(expression)\n\nGenerate the GetDP string representation for the arc cosine function Acos[...]. Domain: expression in [-1, 1]. Range: [0, Pi]. (Real valued only).\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.Asin-Tuple{Any}","page":"API reference","title":"GetDP.Asin","text":"Asin(expression)\n\nGenerate the GetDP string representation for the arc sine function Asin[...]. Domain: expression in [-1, 1]. Range: [-Pi/2, Pi/2]. (Real valued only).\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.AtIndex-Tuple{Any, String}","page":"API reference","title":"GetDP.AtIndex","text":"AtIndex(index_expr, list_expr::String)\n\nGenerate the GetDP string representation for accessing list element by index: AtIndex[index]{list}. list_expr is a comma-separated string list. Index is 0-based(? check GetDP docs).\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.Atan-Tuple{Any}","page":"API reference","title":"GetDP.Atan","text":"Atan(expression)\n\nGenerate the GetDP string representation for the arc tangent function Atan[...]. Range: [-Pi/2, Pi/2]. (Real valued only).\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.Atan2-Tuple{Any, Any}","page":"API reference","title":"GetDP.Atan2","text":"Atan2(y, x)\n\nGenerate the GetDP string representation for the arc tangent function Atan2[y, x]. Computes atan(y/x). Range: [-Pi, Pi]. (Real valued only).\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.Ceil-Tuple{Any}","page":"API reference","title":"GetDP.Ceil","text":"Ceil(expression)\n\nGenerate the GetDP string representation for the ceiling function Ceil[...]. Rounds upwards. (Real valued only).\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.CompElementNum-Tuple{}","page":"API reference","title":"GetDP.CompElementNum","text":"CompElementNum()\n\nGenerate the GetDP string representation to compare current and source element tags: CompElementNum[]. Returns 0 if identical.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.ComplexScalarField-Tuple{Any, String}","page":"API reference","title":"GetDP.ComplexScalarField","text":"ComplexScalarField(expression, expression_cst_list; timestep=0, elmt_interp=true)\n\nGenerate GetDP string for evaluating complex scalar fields: ComplexScalarField[expr, ts, interp]{list}.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.ComplexTensorField-Tuple{Any, String}","page":"API reference","title":"GetDP.ComplexTensorField","text":"ComplexTensorField(expression, expression_cst_list; timestep=0, elmt_interp=true)\n\nGenerate GetDP string for evaluating complex tensor fields: ComplexTensorField[expr, ts, interp]{list}.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.ComplexVectorField-Tuple{Any, String}","page":"API reference","title":"GetDP.ComplexVectorField","text":"ComplexVectorField(expression, expression_cst_list; timestep=0, elmt_interp=true)\n\nGenerate GetDP string for evaluating complex vector fields: ComplexVectorField[expr, ts, interp]{list}.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.Cos-Tuple{Any}","page":"API reference","title":"GetDP.Cos","text":"Cos(expression)\n\nGenerate the GetDP string representation for the cosine function Cos[...].\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.Cos_wt_p-Tuple{Any, Any}","page":"API reference","title":"GetDP.Cos_wt_p","text":"Cos_wt_p(omega, phase)\n\nGenerate the GetDP string representation for the time function Cos_wt_p[]{omega, phase}. Real: Cos[omega*Time + phase]. Complex: Complex[Cos[phase], Sin[phase]].\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.Cosh-Tuple{Any}","page":"API reference","title":"GetDP.Cosh","text":"Cosh(expression)\n\nGenerate the GetDP string representation for the hyperbolic cosine function Cosh[...].\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.Cross-Tuple{Any, Any}","page":"API reference","title":"GetDP.Cross","text":"Cross(vector1, vector2)\n\nGenerate the GetDP string representation for the cross product Cross[vector1, vector2]. Arguments must be vectors.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.Det-Tuple{Any}","page":"API reference","title":"GetDP.Det","text":"Det(expression)\n\nGenerate the GetDP string representation for the tensor determinant function Det[...]. Expression must be a tensor.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.DualEdgesOf-Tuple{Group, Vararg{Any}}","page":"API reference","title":"GetDP.DualEdgesOf","text":"DualEdgesOf(group::Group, args...; kwargs...)\n\nDual edges of elements of R1.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.DualFacetsOf-Tuple{Group, Vararg{Any}}","page":"API reference","title":"GetDP.DualFacetsOf","text":"DualFacetsOf(group::Group, args...; kwargs...)\n\nDual facets of elements of R1.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.DualNodesOf-Tuple{Group, Vararg{Any}}","page":"API reference","title":"GetDP.DualNodesOf","text":"DualNodesOf(group::Group, args...; kwargs...)\n\nDual nodes of elements of R1.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.DualVolumesOf-Tuple{Group, Vararg{Any}}","page":"API reference","title":"GetDP.DualVolumesOf","text":"DualVolumesOf(group::Group, args...; kwargs...)\n\nDual volumes of elements of R1.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.EdgesOf-Tuple{Group, Vararg{Any}}","page":"API reference","title":"GetDP.EdgesOf","text":"EdgesOf(group::Group, args...; Not=nothing, kwargs...)\n\nEdges of elements of R1 (Not: but not those of R2).\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.EdgesOfTreeIn-Tuple{Group, Vararg{Any}}","page":"API reference","title":"GetDP.EdgesOfTreeIn","text":"EdgesOfTreeIn(group::Group, args...; StartingOn=nothing, kwargs...)\n\nEdges of a tree of edges of R1 < StartingOn: a complete tree is first built on R2 >.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.ElementNum-Tuple{}","page":"API reference","title":"GetDP.ElementNum","text":"ElementNum()\n\nGenerate the GetDP string representation for the current element's tag: ElementNum[].\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.ElementVol-Tuple{}","page":"API reference","title":"GetDP.ElementVol","text":"ElementVol()\n\nGenerate the GetDP string representation for the element's volume (or area/length): ElementVol[].\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.ElementsOf-Tuple{Group, Vararg{Any}}","page":"API reference","title":"GetDP.ElementsOf","text":"ElementsOf(group::Group, args...; OnOneSideOf=nothing, OnPositiveSideOf=nothing, Not=nothing, kwargs...)\n\nElements of regions in R1.\n\nOnOneSideOf: only elements on one side of R2 (non-automatic, i.e., both sides if both in R1)\nOnPositiveSideOf: only elements on positive (normal) side of R2\nNot: but not those touching only its skin R3 (mandatory for free skins for correct separation of side layers)\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.Exp-Tuple{Any}","page":"API reference","title":"GetDP.Exp","text":"Exp(expression)\n\nGenerate the GetDP string representation for the exponential function Exp[...]. Example: Exp(\"x\") returns \"Exp[x]\".\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.Fabs-Tuple{Any}","page":"API reference","title":"GetDP.Fabs","text":"Fabs(expression)\n\nGenerate the GetDP string representation for the absolute value function Fabs[...]. (Real valued only).\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.FacetsOf-Tuple{Group, Vararg{Any}}","page":"API reference","title":"GetDP.FacetsOf","text":"FacetsOf(group::Group, args...; Not=nothing, kwargs...)\n\nFacets of elements of R1 (Not: but not those of R2).\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.FacetsOfTreeIn-Tuple{Group, Vararg{Any}}","page":"API reference","title":"GetDP.FacetsOfTreeIn","text":"FacetsOfTreeIn(group::Group, args...; StartingOn=nothing, kwargs...)\n\nFacets of a tree of facets of R1 < StartingOn: a complete tree is first built on R2 >.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.Field-Tuple{Any, String}","page":"API reference","title":"GetDP.Field","text":"Field(eval_point_expr, tags_list_expr::String)\n\nGenerate the GetDP string representation for evaluating and summing specific Gmsh fields: Field[eval_point]{tags_list}. tags_list_expr is a comma-separated list of field tags.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.Field-Tuple{Any}","page":"API reference","title":"GetDP.Field","text":"Field(eval_point_expr)\n\nGenerate the GetDP string representation for evaluating the last Gmsh field: Field[eval_point]. Typically eval_point_expr is XYZ[].\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.Floor-Tuple{Any}","page":"API reference","title":"GetDP.Floor","text":"Floor(expression)\n\nGenerate the GetDP string representation for the floor function Floor[...]. Rounds downwards. (Real valued only).\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.Fmod-Tuple{Any, Any}","page":"API reference","title":"GetDP.Fmod","text":"Fmod(x, y)\n\nGenerate the GetDP string representation for the floating-point remainder function Fmod[x, y]. Remainder of x/y with sign of x. (Real valued only).\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.GetCpuTime-Tuple{}","page":"API reference","title":"GetDP.GetCpuTime","text":"GetCpuTime()\n\nGenerate GetDP string for getting CPU time: GetCpuTime[].\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.GetMemory-Tuple{}","page":"API reference","title":"GetDP.GetMemory","text":"GetMemory()\n\nGenerate GetDP string for getting memory usage (MB): GetMemory[].\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.GetNumElements","page":"API reference","title":"GetDP.GetNumElements","text":"GetNumElements(list_expr::String=\"\")\n\nGenerate the GetDP string representation for counting elements: GetNumElements[]{list}. list_expr is a comma-separated string of physical region tags, or empty for the current region.\n\n\n\n\n\n","category":"function"},{"location":"#GetDP.GetNumberRunTime-Tuple{String}","page":"API reference","title":"GetDP.GetNumberRunTime","text":"GetNumberRunTime(name::String; default_value=nothing)\n\nGenerate GetDP string for getting a ONELAB variable at runtime: GetNumberRunTime[\"name\"] or GetNumberRunTime[\"name\"]{default}.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.GetVariable-Tuple{String}","page":"API reference","title":"GetDP.GetVariable","text":"GetVariable(variable_id::String; default_value=nothing)\n\nGenerate GetDP string for getting a runtime variable: GetVariable[]{variable_id} or GetVariable[default]{variable_id}.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.GetVolume-Tuple{}","page":"API reference","title":"GetDP.GetVolume","text":"GetVolume()\n\nGenerate the GetDP string representation for the volume of the current physical group: GetVolume[].\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.GetWallClockTime-Tuple{}","page":"API reference","title":"GetDP.GetWallClockTime","text":"GetWallClockTime()\n\nGenerate GetDP string for getting wall clock time: GetWallClockTime[].\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.Global-Tuple{Group, Vararg{Any}}","page":"API reference","title":"GetDP.Global","text":"Global(group::Group, args...; kwargs...)\n\nRegions in R1 (variant of Region used with global BasisFunctions BFGlobal and BFdGlobal).\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.GroupOfRegionsOf-Tuple{Group, Vararg{Any}}","page":"API reference","title":"GetDP.GroupOfRegionsOf","text":"GroupOfRegionsOf(group::Group, args...; kwargs...)\n\nSingle group of elements of regions in R1 (with basis function BF_Region just one DOF is created for all elements of R1).\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.GroupsOfEdgesOf-Tuple{Group, Vararg{Any}}","page":"API reference","title":"GetDP.GroupsOfEdgesOf","text":"GroupsOfEdgesOf(group::Group, args...; InSupport=nothing, kwargs...)\n\nGroups of edges of elements of R1 (a group is associated with each region). < InSupport: in a support R2 being a group of type ElementOf, i.e., containing elements >.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.GroupsOfEdgesOnNodesOf-Tuple{Group, Vararg{Any}}","page":"API reference","title":"GetDP.GroupsOfEdgesOnNodesOf","text":"GroupsOfEdgesOnNodesOf(group::Group, args...; Not=nothing, kwargs...)\n\nGroups of edges incident to nodes of elements of R1 (a group is associated with each node). < Not: but not those of R2) >.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.GroupsOfNodesOf-Tuple{Group, Vararg{Any}}","page":"API reference","title":"GetDP.GroupsOfNodesOf","text":"GroupsOfNodesOf(group::Group, args...; kwargs...)\n\nGroups of nodes of elements of R1 (a group is associated with each region).\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.Hypot-Tuple{Any, Any}","page":"API reference","title":"GetDP.Hypot","text":"Hypot(a, b)\n\nGenerate the GetDP string representation for the hypotenuse function Hypot[a, b]. Computes Sqrt(a^2 + b^2).\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.InterpolationAkima-Tuple{Any, String}","page":"API reference","title":"GetDP.InterpolationAkima","text":"InterpolationAkima(x_expr, table_list_expr::String)\n\nGenerate the GetDP string representation for Akima interpolation: InterpolationAkima[x]{table}. table_list_expr is a comma-separated list of x,y pairs: \"x1,y1,x2,y2,...\".\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.InterpolationBilinear-Tuple{Any, Any, String}","page":"API reference","title":"GetDP.InterpolationBilinear","text":"InterpolationBilinear(x_expr, y_expr, table_list_expr::String)\n\nGenerate the GetDP string representation for bilinear interpolation: InterpolationBilinear[x, y]{table}. Table format needs checking in GetDP docs.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.InterpolationLinear-Tuple{Any, String}","page":"API reference","title":"GetDP.InterpolationLinear","text":"InterpolationLinear(x_expr, table_list_expr::String)\n\nGenerate the GetDP string representation for linear interpolation: InterpolationLinear[x]{table}. table_list_expr is a comma-separated list of x,y pairs: \"x1,y1,x2,y2,...\".\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.Inv-Tuple{Any}","page":"API reference","title":"GetDP.Inv","text":"Inv(expression)\n\nGenerate the GetDP string representation for the inverse tensor function Inv[...]. Expression must be a tensor.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.Jn-Tuple{Any, Any}","page":"API reference","title":"GetDP.Jn","text":"Jn(order, value)\n\nGenerate the GetDP string representation for the Bessel function of the first kind Jn[order, value]. (Real valued only).\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.Log-Tuple{Any}","page":"API reference","title":"GetDP.Log","text":"Log(expression)\n\nGenerate the GetDP string representation for the natural logarithm function Log[...]. Example: Log(\"x\") returns \"Log[x]\".\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.Log10-Tuple{Any}","page":"API reference","title":"GetDP.Log10","text":"Log10(expression)\n\nGenerate the GetDP string representation for the base-10 logarithm function Log10[...]. Example: Log10(\"x\") returns \"Log10[x]\".\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.Max-Tuple{Any, Any}","page":"API reference","title":"GetDP.Max","text":"Max(a, b)\n\nGenerate the GetDP string representation for the maximum function Max[a, b]. (Scalar, real valued only).\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.Min-Tuple{Any, Any}","page":"API reference","title":"GetDP.Min","text":"Min(a, b)\n\nGenerate the GetDP string representation for the minimum function Min[a, b]. (Scalar, real valued only).\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.NodesOf-Tuple{Group, Vararg{Any}}","page":"API reference","title":"GetDP.NodesOf","text":"NodesOf(group::Group, args...; Not=nothing, kwargs...)\n\nNodes of elements of R1 (Not: but not those of R2).\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.Norm-Tuple{Any}","page":"API reference","title":"GetDP.Norm","text":"Norm(expression)\n\nGenerate the GetDP string representation for the norm function Norm[...]. Absolute value for scalar, Euclidean norm for vector.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.Normal-Tuple{}","page":"API reference","title":"GetDP.Normal","text":"Normal()\n\nGenerate the GetDP string representation for the element's normal vector: Normal[].\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.NormalSource-Tuple{}","page":"API reference","title":"GetDP.NormalSource","text":"NormalSource()\n\nGenerate the GetDP string representation for the source element's normal vector: NormalSource[]. (Valid in Integral quantity).\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.Order-Tuple{Any}","page":"API reference","title":"GetDP.Order","text":"Order(quantity_name)\n\nGenerate the GetDP string representation for getting interpolation order: Order[quantity].\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.Period-Tuple{Any, Any}","page":"API reference","title":"GetDP.Period","text":"Period(expression, period_const)\n\nGenerate the GetDP string representation for the periodic function Period[expr]{period_const}. Result is always in [0, period_const[.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.Printf-Tuple{Any}","page":"API reference","title":"GetDP.Printf","text":"Printf(expression)\n\nGenerate the GetDP string representation for printing a value during evaluation: Printf[expression].\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.QuadraturePointIndex-Tuple{}","page":"API reference","title":"GetDP.QuadraturePointIndex","text":"QuadraturePointIndex()\n\nGenerate the GetDP string representation for the current quadrature point index: QuadraturePointIndex[].\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.Rand-Tuple{Any}","page":"API reference","title":"GetDP.Rand","text":"Rand(max_val)\n\nGenerate the GetDP string representation for a pseudo-random number in [0, maxval]: `Rand[maxval]`.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.Region-Tuple{Group, Vararg{Any}}","page":"API reference","title":"GetDP.Region","text":"Region(group::Group, args...; kwargs...)\n\nRegions in R1.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.Rotate-NTuple{4, Any}","page":"API reference","title":"GetDP.Rotate","text":"Rotate(object, rot_x, rot_y, rot_z)\n\nGenerate the GetDP string representation for the rotation function Rotate[object, rx, ry, rz]. Rotates a vector or tensor object by angles rot_x, rot_y, rot_z (radians) around axes x, y, z.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.ScalarField-Tuple{Any, String}","page":"API reference","title":"GetDP.ScalarField","text":"ScalarField(expression, expression_cst_list; timestep=0, elmt_interp=true)\n\nGenerate GetDP string for evaluating scalar fields: ScalarField[expr, ts, interp]{list}.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.SetNumberRunTime-Tuple{Any, String}","page":"API reference","title":"GetDP.SetNumberRunTime","text":"SetNumberRunTime(value_expr, name::String)\n\nGenerate GetDP string for setting a ONELAB variable at runtime: SetNumberRunTime[value]{\"name\"}.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.SetVariable-Tuple{Any, String}","page":"API reference","title":"GetDP.SetVariable","text":"SetVariable(value_expr, variable_id::String)\n\nGenerate GetDP string for setting a runtime variable: SetVariable[value]{variable_id}.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.Sign-Tuple{Any}","page":"API reference","title":"GetDP.Sign","text":"Sign(expression)\n\nGenerate the GetDP string representation for the sign function Sign[...]. Returns -1 for expression < 0, 1 otherwise. (Real valued only).\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.Sin-Tuple{Any}","page":"API reference","title":"GetDP.Sin","text":"Sin(expression)\n\nGenerate the GetDP string representation for the sine function Sin[...].\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.Sin_wt_p-Tuple{Any, Any}","page":"API reference","title":"GetDP.Sin_wt_p","text":"Sin_wt_p(omega, phase)\n\nGenerate the GetDP string representation for the time function Sin_wt_p[]{omega, phase}. Real: Sin[omega*Time + phase]. Complex: Complex[Sin[phase], -Cos[phase]].\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.Sinh-Tuple{Any}","page":"API reference","title":"GetDP.Sinh","text":"Sinh(expression)\n\nGenerate the GetDP string representation for the hyperbolic sine function Sinh[...].\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.Sqrt-Tuple{Any}","page":"API reference","title":"GetDP.Sqrt","text":"Sqrt(expression)\n\nGenerate the GetDP string representation for the square root function Sqrt[...]. Example: Sqrt(\"x\") returns \"Sqrt[x]\".\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.SquNorm-Tuple{Any}","page":"API reference","title":"GetDP.SquNorm","text":"SquNorm(expression)\n\nGenerate the GetDP string representation for the square norm function SquNorm[...]. Equivalent to Norm[expression]^2.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.SurfaceArea","page":"API reference","title":"GetDP.SurfaceArea","text":"SurfaceArea(list_expr::String=\"\")\n\nGenerate the GetDP string representation for surface area calculation: SurfaceArea[]{list}. list_expr is a comma-separated string of physical surface tags, or empty for the current surface.\n\n\n\n\n\n","category":"function"},{"location":"#GetDP.TTrace-Tuple{Any}","page":"API reference","title":"GetDP.TTrace","text":"TTrace(tensor)\n\nGenerate the GetDP string representation for the tensor trace function TTrace[...]. Expression must be a tensor.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.Tan-Tuple{Any}","page":"API reference","title":"GetDP.Tan","text":"Tan(expression)\n\nGenerate the GetDP string representation for the tangent function Tan[...].\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.Tangent-Tuple{}","page":"API reference","title":"GetDP.Tangent","text":"Tangent()\n\nGenerate the GetDP string representation for the element's tangent vector: Tangent[]. (Valid for line elements).\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.TangentSource-Tuple{}","page":"API reference","title":"GetDP.TangentSource","text":"TangentSource()\n\nGenerate the GetDP string representation for the source element's tangent vector: TangentSource[]. (Valid in Integral quantity, line elements).\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.Tanh-Tuple{Any}","page":"API reference","title":"GetDP.Tanh","text":"Tanh(expression)\n\nGenerate the GetDP string representation for the hyperbolic tangent function Tanh[...]. (Real valued only).\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.TanhC2-Tuple{Any}","page":"API reference","title":"GetDP.TanhC2","text":"TanhC2(expression)\n\nGenerate the GetDP string representation for the complex hyperbolic tangent function TanhC2[...].\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.TensorField-Tuple{Any, String}","page":"API reference","title":"GetDP.TensorField","text":"TensorField(expression, expression_cst_list; timestep=0, elmt_interp=true)\n\nGenerate GetDP string for evaluating tensor fields: TensorField[expr, ts, interp]{list}.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.Transpose-Tuple{Any}","page":"API reference","title":"GetDP.Transpose","text":"Transpose(expression)\n\nGenerate the GetDP string representation for the transpose function Transpose[...]. Expression must be a tensor.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.Unit-Tuple{Any}","page":"API reference","title":"GetDP.Unit","text":"Unit(expression)\n\nGenerate the GetDP string representation for the unit vector function Unit[...]. Computes expression / Norm[expression]. Returns 0 if norm is near zero.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.ValueFromIndex-Tuple{String}","page":"API reference","title":"GetDP.ValueFromIndex","text":"ValueFromIndex(list_expr::String)\n\nGenerate GetDP string for getting value from index map: ValueFromIndex[]{list}. List format: \"entity1, value1, entity2, value2, ...\".\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.ValueFromTable-Tuple{Any, String}","page":"API reference","title":"GetDP.ValueFromTable","text":"ValueFromTable(default_expr, table_name::String)\n\nGenerate GetDP string for getting value from PostOperation table: ValueFromTable[default]{\"table_name\"}.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.VectorField-Tuple{Any, String}","page":"API reference","title":"GetDP.VectorField","text":"VectorField(expression, expression_cst_list; timestep=0, elmt_interp=true)\n\nGenerate GetDP string for evaluating vector fields: VectorField[expr, ts, interp]{list}.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.VectorFromIndex-Tuple{String}","page":"API reference","title":"GetDP.VectorFromIndex","text":"VectorFromIndex(list_expr::String)\n\nGenerate GetDP string for getting vector from index map: VectorFromIndex[]{list}. List format: \"entity1, v1x, v1y, v1z, entity2, v2x, ...\".\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.VolumesOf-Tuple{Group, Vararg{Any}}","page":"API reference","title":"GetDP.VolumesOf","text":"VolumesOf(group::Group, args...; Not=nothing, kwargs...)\n\nVolumes of elements of R1 (Not: but not those of R2).\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.Yn-Tuple{Any, Any}","page":"API reference","title":"GetDP.Yn","text":"Yn(order, value)\n\nGenerate the GetDP string representation for the Bessel function of the second kind Yn[order, value]. (Real valued only).\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.add!","page":"API reference","title":"GetDP.add!","text":"add!(group::Group, id=\"domain\", glist=[1], gtype=\"Region\"; operation=\"=\", comment=nothing, kwargs...)\n\nAdd an expression to the Group object. The default group type is \"Region\". Use operation=\"=\" to define a group or operation=\"+=\" to extend an existing group.\n\n\n\n\n\n","category":"function"},{"location":"#GetDP.add!-Tuple{Base_, Vararg{Any}}","page":"API reference","title":"GetDP.add!","text":"add!(base::Base_, args...; kwargs...)\n\nAdd a SimpleItem to a Base_ object.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.add!-Tuple{Case_, Vararg{Any}}","page":"API reference","title":"GetDP.add!","text":"add!(case::Case_, args...; kwargs...)\n\nAdd a CaseItem_ to a Case_ object.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.add!-Tuple{Constraint, Any}","page":"API reference","title":"GetDP.add!","text":"add!(constraint::Constraint, name; type=\"Assign\", comment=nothing)\n\nAdd a constraint to the Constraint object. Returns the ConstraintItem for adding cases.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.add!-Tuple{Formulation, Any, Any}","page":"API reference","title":"GetDP.add!","text":"add!(formulation::Formulation, Name, Type; kwargs...)\n\nAdd a formulation item to a formulation.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.add!-Tuple{GetDP.Equation, String, String}","page":"API reference","title":"GetDP.add!","text":"add!(equation::Equation, term_type::String, term::String; kwargs...)\n\nAdd an equation term to an equation.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.add!-Tuple{GetDP.Function, Any, Any}","page":"API reference","title":"GetDP.add!","text":"add!(func::Function, id, expression; comment=nothing)\n\nAdd a simple function to the Function object.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.add!-Tuple{GetDP.Function, Any}","page":"API reference","title":"GetDP.add!","text":"add!(func::Function, id; expression, arguments=String[], region=String[], comment=nothing)\n\nAdd a function to the Function object with optional region and arguments.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.add!-Tuple{ObjectItem, Vararg{Any}}","page":"API reference","title":"GetDP.add!","text":"add!(obj::ObjectItem, args...; kwargs...)\n\nAdd a Case_ to an ObjectItem.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.add!-Tuple{PostOperation, Any, Any}","page":"API reference","title":"GetDP.add!","text":"add!(postoperation::PostOperation, id, NameOfPostProcessing; kwargs...)\n\nAdd a post-operation item.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.add!-Tuple{PostProcessing, String, String}","page":"API reference","title":"GetDP.add!","text":"add!(postprocessing::PostProcessing, name::String, NameOfFormulation::String; kwargs...)\n\nAdd a post-processing item.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.add!-Tuple{Resolution, Any, Any}","page":"API reference","title":"GetDP.add!","text":"add!(resolution::Resolution, id, system_name; kwargs...)\n\nAdd a resolution with system and operation to the Resolution object.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.add_akima!-Tuple{GetDP.Function, Any, Any, Any}","page":"API reference","title":"GetDP.add_akima!","text":"add_akima!(func::Function, id, x, y; comment=nothing)\n\nAdd an Akima interpolation function to the Function object.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.add_analytic!-Tuple{GetDP.Function, Any, Any}","page":"API reference","title":"GetDP.add_analytic!","text":"add_analytic!(func::Function, id, expression; comment=nothing)\n\nAdd an analytic function to the Function object.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.add_comment!","page":"API reference","title":"GetDP.add_comment!","text":"add_comment!(obj::GetDPObject, comment_text, newline=true)\n\nAdd a comment to the object's content.\n\n\n\n\n\n","category":"function"},{"location":"#GetDP.add_comment!-2","page":"API reference","title":"GetDP.add_comment!","text":"add_comment!(postprocessing::PostProcessing, comment_text, newline=true)\n\nAdd a comment to the PostProcessing object.\n\n\n\n\n\n","category":"function"},{"location":"#GetDP.add_comment!-3","page":"API reference","title":"GetDP.add_comment!","text":"add_comment!(constraint::Constraint, comment_text, newline=true)\n\nAdd a comment to the Constraint object.\n\n\n\n\n\n","category":"function"},{"location":"#GetDP.add_comment!-4","page":"API reference","title":"GetDP.add_comment!","text":"add_comment!(resolution::Resolution, comment_text, newline=true)\n\nAdd a comment to the Resolution object.\n\n\n\n\n\n","category":"function"},{"location":"#GetDP.add_comment!-5","page":"API reference","title":"GetDP.add_comment!","text":"add_comment!(func::Function, comment_text, newline=true)\n\nAdd a comment to the Function object.\n\n\n\n\n\n","category":"function"},{"location":"#GetDP.add_comment!-6","page":"API reference","title":"GetDP.add_comment!","text":"add_comment!(formulation::Formulation, comment_text, newline=true)\n\nAdd a comment to the Formulation object.\n\n\n\n\n\n","category":"function"},{"location":"#GetDP.add_comment!-7","page":"API reference","title":"GetDP.add_comment!","text":"add_comment!(postoperation::PostOperation, comment_text, newline=true)\n\nAdd a comment to the PostOperation object.\n\n\n\n\n\n","category":"function"},{"location":"#GetDP.add_comment!-8","page":"API reference","title":"GetDP.add_comment!","text":"add_comment!(problem::Problem, comment_text, newline=true)\n\nAdd a comment to the Problem object.\n\n\n\n\n\n","category":"function"},{"location":"#GetDP.add_comment!-Tuple{Group, Any}","page":"API reference","title":"GetDP.add_comment!","text":"add_comment!(group::group, comment_text, newline=true)\n\nAdd a comment to the group object.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.add_constant!-Tuple{GetDP.Function, Any, Any}","page":"API reference","title":"GetDP.add_constant!","text":"add_constant!(func::Function, variable, value; comment=nothing)\n\nAdd a global constant to the Function object.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.add_equation!-Tuple{GetDP.FormulationItem, Vararg{Any}}","page":"API reference","title":"GetDP.add_equation!","text":"add_equation!(item::FormulationItem, args...; kwargs...)\n\nAdd an equation to a formulation item.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.add_file!-Tuple{GetDP.Function, Any, Any}","page":"API reference","title":"GetDP.add_file!","text":"add_file!(func::Function, id, filename; comment=nothing)\n\nAdd a function from a file to the Function object.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.add_list!-Tuple{GetDP.Function, Any, Any}","page":"API reference","title":"GetDP.add_list!","text":"add_list!(func::Function, id, expression_list; comment=nothing)\n\nAdd a list of functions to the Function object.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.add_piecewise!-Tuple{GetDP.Function, Any, Any, Any}","page":"API reference","title":"GetDP.add_piecewise!","text":"add_piecewise!(func::Function, id, x, y; comment=nothing)\n\nAdd a piecewise function to the Function object.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.add_quantity!-Tuple{GetDP.FormulationItem, String}","page":"API reference","title":"GetDP.add_quantity!","text":"add_quantity!(item::FormulationItem, name::String; kwargs...)\n\nAdd a quantity to a formulation item.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.add_raw_code","page":"API reference","title":"GetDP.add_raw_code","text":"add_raw_code(s, raw_code, newline=true)\n\nAdd raw code to a string, optionally with a newline.\n\n\n\n\n\n","category":"function"},{"location":"#GetDP.add_raw_code!","page":"API reference","title":"GetDP.add_raw_code!","text":"add_raw_code!(problem::Problem, raw_code, newline=true)\n\nAdd raw code to the Problem object.\n\n\n\n\n\n","category":"function"},{"location":"#GetDP.add_raw_code!-2","page":"API reference","title":"GetDP.add_raw_code!","text":"add_raw_code!(obj::GetDPObject, raw_code, newline=true)\n\nAdd raw code to the object's content.\n\n\n\n\n\n","category":"function"},{"location":"#GetDP.add_raw_code!-3","page":"API reference","title":"GetDP.add_raw_code!","text":"add_raw_code!(group::group, raw_code, newline=true)\n\nAdd raw code to the group object.\n\n\n\n\n\n","category":"function"},{"location":"#GetDP.add_raw_code!-4","page":"API reference","title":"GetDP.add_raw_code!","text":"add_raw_code!(postprocessing::PostProcessing, raw_code, newline=true)\n\nAdd raw code to the PostProcessing object.\n\n\n\n\n\n","category":"function"},{"location":"#GetDP.add_raw_code!-5","page":"API reference","title":"GetDP.add_raw_code!","text":"add_raw_code!(constraint::Constraint, raw_code, newline=true)\n\nAdd raw code to the Constraint object.\n\n\n\n\n\n","category":"function"},{"location":"#GetDP.add_raw_code!-6","page":"API reference","title":"GetDP.add_raw_code!","text":"add_raw_code!(resolution::Resolution, raw_code, newline=true)\n\nAdd raw code to the Resolution object.\n\n\n\n\n\n","category":"function"},{"location":"#GetDP.add_raw_code!-7","page":"API reference","title":"GetDP.add_raw_code!","text":"add_raw_code!(func::Function, raw_code, newline=true)\n\nAdd raw code to the Function object.\n\n\n\n\n\n","category":"function"},{"location":"#GetDP.add_raw_code!-8","page":"API reference","title":"GetDP.add_raw_code!","text":"add_raw_code!(formulation::Formulation, raw_code, newline=true)\n\nAdd raw code to the Formulation object.\n\n\n\n\n\n","category":"function"},{"location":"#GetDP.add_raw_code!-9","page":"API reference","title":"GetDP.add_raw_code!","text":"add_raw_code!(postoperation::PostOperation, raw_code, newline=true)\n\nAdd raw code to the PostOperation object.\n\n\n\n\n\n","category":"function"},{"location":"#GetDP.add_raw_code!-Tuple{GetDP.PostOperationItem, Any}","page":"API reference","title":"GetDP.add_raw_code!","text":"add_raw_code!(poitem::PostOperationItem, raw_code)\n\nAdd raw code to a PostOperationItem.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.add_space!","page":"API reference","title":"GetDP.add_space!","text":"add_space!(group::Group, num_spaces::Int=1)\n\nAdd a specified number of empty lines to the Group object's content for spacing in the output.\n\n\n\n\n\n","category":"function"},{"location":"#GetDP.add_space!-2","page":"API reference","title":"GetDP.add_space!","text":"add_space!(function::Function, num_spaces::Int=1)\n\nAdd a specified number of empty lines to the function object's content for spacing in the output.\n\n\n\n\n\n","category":"function"},{"location":"#GetDP.assign!-Tuple{Constraint, Any}","page":"API reference","title":"GetDP.assign!","text":"assign!(constraint::Constraint, name; comment=nothing)\n\nAdd an Assign-type constraint to the Constraint object (shortcut for add!). Returns the ConstraintItem for adding cases.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.case!-Tuple{GetDP.ConstraintItem, Any}","page":"API reference","title":"GetDP.case!","text":"case!(item::ConstraintItem, region; value=nothing, time_function=nothing, comment=nothing)\n\nAdd a case to a ConstraintItem with specified region and parameters.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.code-Tuple{Constraint}","page":"API reference","title":"GetDP.code","text":"code(constraint::Constraint)\n\nGenerate GetDP code for a Constraint object.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.code-Tuple{Formulation}","page":"API reference","title":"GetDP.code","text":"code(formulation::Formulation)\n\nGenerate GetDP code for a Formulation object.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.code-Tuple{GetDP.Function}","page":"API reference","title":"GetDP.code","text":"code(func::Function)\n\nGenerate GetDP code for a Function object.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.code-Tuple{GetDPObject}","page":"API reference","title":"GetDP.code","text":"code(obj::GetDPObject)\n\nGenerate GetDP code for the object.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.code-Tuple{Group}","page":"API reference","title":"GetDP.code","text":"code(group::Group)\n\nGenerate GetDP code for a Group object.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.code-Tuple{ObjectItem}","page":"API reference","title":"GetDP.code","text":"code(obj::ObjectItem)\n\nGenerate GetDP code for the object item.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.code-Tuple{PostOperation}","page":"API reference","title":"GetDP.code","text":"code(postoperation::PostOperation)\n\nGenerate GetDP code for a PostOperation object.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.code-Tuple{PostProcessing}","page":"API reference","title":"GetDP.code","text":"code(postprocessing::PostProcessing)\n\nGenerate GetDP code for a PostProcessing object.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.code-Tuple{Resolution}","page":"API reference","title":"GetDP.code","text":"code(resolution::Resolution)\n\nGenerate GetDP code for a Resolution object.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.comment-Tuple{Any}","page":"API reference","title":"GetDP.comment","text":"comment(s, style=\"short\", newline=false)\n\nAdd a comment to a string, optionally with a newline.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.content-Tuple{Formulation}","page":"API reference","title":"GetDP.content","text":"content(formulation::Formulation)\n\nGet the content of a formulation.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.dInterpolationAkima-Tuple{Any, String}","page":"API reference","title":"GetDP.dInterpolationAkima","text":"dInterpolationAkima(x_expr, table_list_expr::String)\n\nGenerate the GetDP string representation for the derivative of Akima interpolation: dInterpolationAkima[x]{table}.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.dInterpolationBilinear-Tuple{Any, Any, String}","page":"API reference","title":"GetDP.dInterpolationBilinear","text":"dInterpolationBilinear(x_expr, y_expr, table_list_expr::String)\n\nGenerate the GetDP string representation for the derivative of bilinear interpolation: dInterpolationBilinear[x, y]{table}. Result is a vector.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.dInterpolationLinear-Tuple{Any, String}","page":"API reference","title":"GetDP.dInterpolationLinear","text":"dInterpolationLinear(x_expr, table_list_expr::String)\n\nGenerate the GetDP string representation for the derivative of linear interpolation: dInterpolationLinear[x]{table}.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.dJn-Tuple{Any, Any}","page":"API reference","title":"GetDP.dJn","text":"dJn(order, value)\n\nGenerate the GetDP string representation for the derivative of the Bessel function of the first kind dJn[order, value]. (Real valued only).\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.dYn-Tuple{Any, Any}","page":"API reference","title":"GetDP.dYn","text":"dYn(order, value)\n\nGenerate the GetDP string representation for the derivative of the Bessel function of the second kind dYn[order, value]. (Real valued only).\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.define!","page":"API reference","title":"GetDP.define!","text":"define!(group::Group, id=\"domain\")\n\nDefine a group.\n\n\n\n\n\n","category":"function"},{"location":"#GetDP.for_loop!-Tuple{GetDP.ConstraintItem, Any, Any}","page":"API reference","title":"GetDP.for_loop!","text":"for_loop!(item::ConstraintItem, index, range)\n\nSet a For loop for the ConstraintItem (e.g., For k In {1:3}).\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.get_code-Tuple{Problem}","page":"API reference","title":"GetDP.get_code","text":"get_code(problem::Problem)\n\nReturns properly formatted GetDP code.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.include!-Tuple{Problem, Any}","page":"API reference","title":"GetDP.include!","text":"include!(problem::Problem, incl_file)\n\nInclude another GetDP file.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.make_file!-Tuple{Problem}","page":"API reference","title":"GetDP.make_file!","text":"make_file!(problem::Problem)\n\nGenerate the GetDP code for all objects in the Problem, including only non-empty components.\n\n\n\n\n\n","category":"method"},{"location":"#GetDP.write_file!-Tuple{Problem}","page":"API reference","title":"GetDP.write_file!","text":"write_file!(problem::Problem)\n\nWrite the GetDP code to a file.\n\n\n\n\n\n","category":"method"}]
}
